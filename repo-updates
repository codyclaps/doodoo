variables:
  KVASIR_PROJECT_ID: "<kvasir_project_id>"
  TOOLBELT_PROJECT_ID: "<toolbelt_project_id>"
  ELLIS_ISLAND_PROJECT_ID: "<ellis-island_project_id>"
  GITLAB_URL: "https://gitlab.example.com"

stages:
  - pull
  - scan
  - generate_artifacts
  - trigger_validation
  - push

pull_tools:
  stage: pull
  image: alpine:latest
  before_script:
    - apk add --no-cache git curl
  script:
    - echo "Pulling open-source tools"
    - mkdir -p tools
    - git clone https://github.com/projectdiscovery/nuclei.git tools/nuclei
    - git clone https://github.com/aquasecurity/trivy.git tools/trivy
    - git clone https://github.com/anchore/syft.git tools/syft
    - git clone https://github.com/trufflesecurity/trufflehog.git tools/trufflehog
    - ls -la tools
  artifacts:
    paths:
      - tools/
    expire_in: 1 week
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"'

scan_tools:
  stage: scan
  image: python:3.11-slim
  before_script:
    - pip install trufflehog
    - apt-get update && apt-get install -y curl
  script:
    - echo "Scanning tools with TruffleHog for secrets"
    - trufflehog filesystem tools/ --no-verification --json > trufflehog-report.json
  artifacts:
    paths:
      - trufflehog-report.json
    expire_in: 1 week
  dependencies:
    - pull_tools
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"'

generate_sbom:
  stage: generate_artifacts
  image: golang:1.21
  before_script:
    - curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
  script:
    - echo "Generating SBOM with Syft"
    - syft tools/ -o cyclonedx-json > sbom.json
  artifacts:
    paths:
      - sbom.json
    expire_in: 1 week
  dependencies:
    - pull_tools
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"'

trigger_ellis_island:
  stage: trigger_validation
  script:
    - echo "Triggering Ellis-Island pipeline for comprehensive scanning"
    - curl --request POST --header "PRIVATE-TOKEN: $ELLIS_ISLAND_ACCESS_TOKEN" "$GITLAB_URL/api/v4/projects/$ELLIS_ISLAND_PROJECT_ID/pipeline?ref=main"
  dependencies:
    - scan_tools
    - generate_sbom
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"'

push_to_kvasir:
  stage: push
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Pushing artifacts to Kvasir"
    - curl --request POST --header "PRIVATE-TOKEN: $KVASIR_ACCESS_TOKEN" "$GITLAB_URL/api/v4/projects/$KVASIR_PROJECT_ID/repository/files/sboms%2Fsbom-${CI_PIPELINE_ID}.json" --form "content=$(cat sbom.json | base64)" --form "branch=main" --form "commit_message=Add SBOM for pipeline ${CI_PIPELINE_ID}"
    - curl --request POST --header "PRIVATE-TOKEN: $KVASIR_ACCESS_TOKEN" "$GITLAB_URL/api/v4/projects/$KVASIR_PROJECT_ID/repository/files/audit%2Ftrufflehog-${CI_PIPELINE_ID}.json" --form "content=$(cat trufflehog-report.json | base64)" --form "branch=main" --form "commit_message=Add TruffleHog report for pipeline ${CI_PIPELINE_ID}"
  dependencies:
    - scan_tools
    - generate_sbom
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "merge_request_event"'

push_to_toolbelt:
  stage: push
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Pushing approved tools to Toolbelt"
    - tar -czf tools.tar.gz tools/
    - curl --request POST --header "PRIVATE-TOKEN: $TOOLBELT_ACCESS_TOKEN" "$GITLAB_URL/api/v4/projects/$TOOLBELT_PROJECT_ID/repository/files/tools%2Fapproved-tools-${CI_PIPELINE_ID}.tar.gz" --form "content=$(cat tools.tar.gz | base64)" --form "branch=main" --form "commit_message=Add approved tools for pipeline ${CI_PIPELINE_ID}"
  dependencies:
    - trigger_ellis_island
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "merge_request_event"'
